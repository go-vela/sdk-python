# coding: utf-8
#
# Copyright (c) 2021 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ruleset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_continue': 'bool',
        '_if': 'Rules',
        'matcher': 'str',
        'operator': 'str',
        'unless': 'Rules'
    }

    attribute_map = {
        '_continue': 'continue',
        '_if': 'if',
        'matcher': 'matcher',
        'operator': 'operator',
        'unless': 'unless'
    }

    def __init__(self, _continue=None, _if=None, matcher=None, operator=None, unless=None):  # noqa: E501
        """Ruleset - a model defined in Swagger"""  # noqa: E501
        self.__continue = None
        self.__if = None
        self._matcher = None
        self._operator = None
        self._unless = None
        self.discriminator = None
        if _continue is not None:
            self._continue = _continue
        if _if is not None:
            self._if = _if
        if matcher is not None:
            self.matcher = matcher
        if operator is not None:
            self.operator = operator
        if unless is not None:
            self.unless = unless

    @property
    def _continue(self):
        """Gets the _continue of this Ruleset.  # noqa: E501


        :return: The _continue of this Ruleset.  # noqa: E501
        :rtype: bool
        """
        return self.__continue

    @_continue.setter
    def _continue(self, _continue):
        """Sets the _continue of this Ruleset.


        :param _continue: The _continue of this Ruleset.  # noqa: E501
        :type: bool
        """

        self.__continue = _continue

    @property
    def _if(self):
        """Gets the _if of this Ruleset.  # noqa: E501


        :return: The _if of this Ruleset.  # noqa: E501
        :rtype: Rules
        """
        return self.__if

    @_if.setter
    def _if(self, _if):
        """Sets the _if of this Ruleset.


        :param _if: The _if of this Ruleset.  # noqa: E501
        :type: Rules
        """

        self.__if = _if

    @property
    def matcher(self):
        """Gets the matcher of this Ruleset.  # noqa: E501


        :return: The matcher of this Ruleset.  # noqa: E501
        :rtype: str
        """
        return self._matcher

    @matcher.setter
    def matcher(self, matcher):
        """Sets the matcher of this Ruleset.


        :param matcher: The matcher of this Ruleset.  # noqa: E501
        :type: str
        """

        self._matcher = matcher

    @property
    def operator(self):
        """Gets the operator of this Ruleset.  # noqa: E501


        :return: The operator of this Ruleset.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Ruleset.


        :param operator: The operator of this Ruleset.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def unless(self):
        """Gets the unless of this Ruleset.  # noqa: E501


        :return: The unless of this Ruleset.  # noqa: E501
        :rtype: Rules
        """
        return self._unless

    @unless.setter
    def unless(self, unless):
        """Sets the unless of this Ruleset.


        :param unless: The unless of this Ruleset.  # noqa: E501
        :type: Rules
        """

        self._unless = unless

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ruleset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ruleset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
