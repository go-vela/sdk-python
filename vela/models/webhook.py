# coding: utf-8
#
# Copyright (c) 2021 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'str',
        'build_id': 'int',
        'created': 'int',
        'error': 'str',
        'event': 'str',
        'host': 'str',
        'id': 'int',
        'link': 'str',
        'number': 'int',
        'repo_id': 'int',
        'source_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'build_id': 'build_id',
        'created': 'created',
        'error': 'error',
        'event': 'event',
        'host': 'host',
        'id': 'id',
        'link': 'link',
        'number': 'number',
        'repo_id': 'repo_id',
        'source_id': 'source_id',
        'status': 'status'
    }

    def __init__(self, branch=None, build_id=None, created=None, error=None, event=None, host=None, id=None, link=None, number=None, repo_id=None, source_id=None, status=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501
        self._branch = None
        self._build_id = None
        self._created = None
        self._error = None
        self._event = None
        self._host = None
        self._id = None
        self._link = None
        self._number = None
        self._repo_id = None
        self._source_id = None
        self._status = None
        self.discriminator = None
        if branch is not None:
            self.branch = branch
        if build_id is not None:
            self.build_id = build_id
        if created is not None:
            self.created = created
        if error is not None:
            self.error = error
        if event is not None:
            self.event = event
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if link is not None:
            self.link = link
        if number is not None:
            self.number = number
        if repo_id is not None:
            self.repo_id = repo_id
        if source_id is not None:
            self.source_id = source_id
        if status is not None:
            self.status = status

    @property
    def branch(self):
        """Gets the branch of this Webhook.  # noqa: E501


        :return: The branch of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Webhook.


        :param branch: The branch of this Webhook.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def build_id(self):
        """Gets the build_id of this Webhook.  # noqa: E501


        :return: The build_id of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this Webhook.


        :param build_id: The build_id of this Webhook.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def created(self):
        """Gets the created of this Webhook.  # noqa: E501


        :return: The created of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Webhook.


        :param created: The created of this Webhook.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def error(self):
        """Gets the error of this Webhook.  # noqa: E501


        :return: The error of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Webhook.


        :param error: The error of this Webhook.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def event(self):
        """Gets the event of this Webhook.  # noqa: E501


        :return: The event of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Webhook.


        :param event: The event of this Webhook.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def host(self):
        """Gets the host of this Webhook.  # noqa: E501


        :return: The host of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Webhook.


        :param host: The host of this Webhook.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501


        :return: The id of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.


        :param id: The id of this Webhook.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this Webhook.  # noqa: E501


        :return: The link of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Webhook.


        :param link: The link of this Webhook.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def number(self):
        """Gets the number of this Webhook.  # noqa: E501


        :return: The number of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Webhook.


        :param number: The number of this Webhook.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def repo_id(self):
        """Gets the repo_id of this Webhook.  # noqa: E501


        :return: The repo_id of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this Webhook.


        :param repo_id: The repo_id of this Webhook.  # noqa: E501
        :type: int
        """

        self._repo_id = repo_id

    @property
    def source_id(self):
        """Gets the source_id of this Webhook.  # noqa: E501


        :return: The source_id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Webhook.


        :param source_id: The source_id of this Webhook.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def status(self):
        """Gets the status of this Webhook.  # noqa: E501


        :return: The status of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Webhook.


        :param status: The status of this Webhook.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
