# coding: utf-8
#
# Copyright (c) 2022 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'Ruletype',
        'comment': 'Ruletype',
        'event': 'Ruletype',
        'path': 'Ruletype',
        'repo': 'Ruletype',
        'status': 'Ruletype',
        'tag': 'Ruletype',
        'target': 'Ruletype'
    }

    attribute_map = {
        'branch': 'branch',
        'comment': 'comment',
        'event': 'event',
        'path': 'path',
        'repo': 'repo',
        'status': 'status',
        'tag': 'tag',
        'target': 'target'
    }

    def __init__(self, branch=None, comment=None, event=None, path=None, repo=None, status=None, tag=None, target=None):  # noqa: E501
        """Rules - a model defined in Swagger"""  # noqa: E501
        self._branch = None
        self._comment = None
        self._event = None
        self._path = None
        self._repo = None
        self._status = None
        self._tag = None
        self._target = None
        self.discriminator = None
        if branch is not None:
            self.branch = branch
        if comment is not None:
            self.comment = comment
        if event is not None:
            self.event = event
        if path is not None:
            self.path = path
        if repo is not None:
            self.repo = repo
        if status is not None:
            self.status = status
        if tag is not None:
            self.tag = tag
        if target is not None:
            self.target = target

    @property
    def branch(self):
        """Gets the branch of this Rules.  # noqa: E501


        :return: The branch of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Rules.


        :param branch: The branch of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._branch = branch

    @property
    def comment(self):
        """Gets the comment of this Rules.  # noqa: E501


        :return: The comment of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Rules.


        :param comment: The comment of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._comment = comment

    @property
    def event(self):
        """Gets the event of this Rules.  # noqa: E501


        :return: The event of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Rules.


        :param event: The event of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._event = event

    @property
    def path(self):
        """Gets the path of this Rules.  # noqa: E501


        :return: The path of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Rules.


        :param path: The path of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._path = path

    @property
    def repo(self):
        """Gets the repo of this Rules.  # noqa: E501


        :return: The repo of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Rules.


        :param repo: The repo of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._repo = repo

    @property
    def status(self):
        """Gets the status of this Rules.  # noqa: E501


        :return: The status of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Rules.


        :param status: The status of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this Rules.  # noqa: E501


        :return: The tag of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Rules.


        :param tag: The tag of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._tag = tag

    @property
    def target(self):
        """Gets the target of this Rules.  # noqa: E501


        :return: The target of this Rules.  # noqa: E501
        :rtype: Ruletype
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Rules.


        :param target: The target of this Rules.  # noqa: E501
        :type: Ruletype
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
