# coding: utf-8
#
# Copyright (c) 2021 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Secret(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engine': 'str',
        'key': 'str',
        'name': 'str',
        'origin': 'Container',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'engine': 'engine',
        'key': 'key',
        'name': 'name',
        'origin': 'origin',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, engine=None, key=None, name=None, origin=None, type=None, value=None):  # noqa: E501
        """Secret - a model defined in Swagger"""  # noqa: E501
        self._engine = None
        self._key = None
        self._name = None
        self._origin = None
        self._type = None
        self._value = None
        self.discriminator = None
        if engine is not None:
            self.engine = engine
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if origin is not None:
            self.origin = origin
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def engine(self):
        """Gets the engine of this Secret.  # noqa: E501


        :return: The engine of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this Secret.


        :param engine: The engine of this Secret.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def key(self):
        """Gets the key of this Secret.  # noqa: E501


        :return: The key of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Secret.


        :param key: The key of this Secret.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Secret.  # noqa: E501


        :return: The name of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.


        :param name: The name of this Secret.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this Secret.  # noqa: E501


        :return: The origin of this Secret.  # noqa: E501
        :rtype: Container
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Secret.


        :param origin: The origin of this Secret.  # noqa: E501
        :type: Container
        """

        self._origin = origin

    @property
    def type(self):
        """Gets the type of this Secret.  # noqa: E501


        :return: The type of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Secret.


        :param type: The type of this Secret.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Secret.  # noqa: E501


        :return: The value of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Secret.


        :param value: The value of this Secret.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Secret, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Secret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
