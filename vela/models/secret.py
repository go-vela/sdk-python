# coding: utf-8

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Secret(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_command': 'bool',
        'events': 'list[str]',
        'id': 'int',
        'images': 'list[str]',
        'name': 'str',
        'org': 'str',
        'repo': 'str',
        'team': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'allow_command': 'allow_command',
        'events': 'events',
        'id': 'id',
        'images': 'images',
        'name': 'name',
        'org': 'org',
        'repo': 'repo',
        'team': 'team',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, allow_command=None, events=None, id=None, images=None, name=None, org=None, repo=None, team=None, type=None, value=None):  # noqa: E501
        """Secret - a model defined in Swagger"""  # noqa: E501
        self._allow_command = None
        self._events = None
        self._id = None
        self._images = None
        self._name = None
        self._org = None
        self._repo = None
        self._team = None
        self._type = None
        self._value = None
        self.discriminator = None
        if allow_command is not None:
            self.allow_command = allow_command
        if events is not None:
            self.events = events
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if name is not None:
            self.name = name
        if org is not None:
            self.org = org
        if repo is not None:
            self.repo = repo
        if team is not None:
            self.team = team
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def allow_command(self):
        """Gets the allow_command of this Secret.  # noqa: E501


        :return: The allow_command of this Secret.  # noqa: E501
        :rtype: bool
        """
        return self._allow_command

    @allow_command.setter
    def allow_command(self, allow_command):
        """Sets the allow_command of this Secret.


        :param allow_command: The allow_command of this Secret.  # noqa: E501
        :type: bool
        """

        self._allow_command = allow_command

    @property
    def events(self):
        """Gets the events of this Secret.  # noqa: E501


        :return: The events of this Secret.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Secret.


        :param events: The events of this Secret.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def id(self):
        """Gets the id of this Secret.  # noqa: E501


        :return: The id of this Secret.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Secret.


        :param id: The id of this Secret.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Secret.  # noqa: E501


        :return: The images of this Secret.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Secret.


        :param images: The images of this Secret.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this Secret.  # noqa: E501


        :return: The name of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.


        :param name: The name of this Secret.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Secret.  # noqa: E501


        :return: The org of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Secret.


        :param org: The org of this Secret.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def repo(self):
        """Gets the repo of this Secret.  # noqa: E501


        :return: The repo of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Secret.


        :param repo: The repo of this Secret.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def team(self):
        """Gets the team of this Secret.  # noqa: E501


        :return: The team of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Secret.


        :param team: The team of this Secret.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def type(self):
        """Gets the type of this Secret.  # noqa: E501


        :return: The type of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Secret.


        :param type: The type of this Secret.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Secret.  # noqa: E501


        :return: The value of this Secret.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Secret.


        :param value: The value of this Secret.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Secret, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Secret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
