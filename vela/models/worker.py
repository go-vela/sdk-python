# coding: utf-8
#
# Copyright (c) 2022 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Worker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'address': 'str',
        'hostname': 'str',
        'id': 'int',
        'last_checked_in': 'int',
        'routes': 'list[str]'
    }

    attribute_map = {
        'active': 'active',
        'address': 'address',
        'hostname': 'hostname',
        'id': 'id',
        'last_checked_in': 'last_checked_in',
        'routes': 'routes'
    }

    def __init__(self, active=None, address=None, hostname=None, id=None, last_checked_in=None, routes=None):  # noqa: E501
        """Worker - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._address = None
        self._hostname = None
        self._id = None
        self._last_checked_in = None
        self._routes = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if address is not None:
            self.address = address
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if last_checked_in is not None:
            self.last_checked_in = last_checked_in
        if routes is not None:
            self.routes = routes

    @property
    def active(self):
        """Gets the active of this Worker.  # noqa: E501


        :return: The active of this Worker.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Worker.


        :param active: The active of this Worker.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this Worker.  # noqa: E501


        :return: The address of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Worker.


        :param address: The address of this Worker.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def hostname(self):
        """Gets the hostname of this Worker.  # noqa: E501


        :return: The hostname of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Worker.


        :param hostname: The hostname of this Worker.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this Worker.  # noqa: E501


        :return: The id of this Worker.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Worker.


        :param id: The id of this Worker.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_checked_in(self):
        """Gets the last_checked_in of this Worker.  # noqa: E501


        :return: The last_checked_in of this Worker.  # noqa: E501
        :rtype: int
        """
        return self._last_checked_in

    @last_checked_in.setter
    def last_checked_in(self, last_checked_in):
        """Sets the last_checked_in of this Worker.


        :param last_checked_in: The last_checked_in of this Worker.  # noqa: E501
        :type: int
        """

        self._last_checked_in = last_checked_in

    @property
    def routes(self):
        """Gets the routes of this Worker.  # noqa: E501


        :return: The routes of this Worker.  # noqa: E501
        :rtype: list[str]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this Worker.


        :param routes: The routes of this Worker.  # noqa: E501
        :type: list[str]
        """

        self._routes = routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Worker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Worker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
