# coding: utf-8
#
# Copyright (c) 2021 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineBuild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'metadata': 'PipelineMetadata',
        'secrets': 'SecretSlice',
        'services': 'ContainerSlice',
        'stages': 'StageSlice',
        'steps': 'ContainerSlice',
        'version': 'str',
        'worker': 'PipelineWorker'
    }

    attribute_map = {
        'id': 'id',
        'metadata': 'metadata',
        'secrets': 'secrets',
        'services': 'services',
        'stages': 'stages',
        'steps': 'steps',
        'version': 'version',
        'worker': 'worker'
    }

    def __init__(self, id=None, metadata=None, secrets=None, services=None, stages=None, steps=None, version=None, worker=None):  # noqa: E501
        """PipelineBuild - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._metadata = None
        self._secrets = None
        self._services = None
        self._stages = None
        self._steps = None
        self._version = None
        self._worker = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata
        if secrets is not None:
            self.secrets = secrets
        if services is not None:
            self.services = services
        if stages is not None:
            self.stages = stages
        if steps is not None:
            self.steps = steps
        if version is not None:
            self.version = version
        if worker is not None:
            self.worker = worker

    @property
    def id(self):
        """Gets the id of this PipelineBuild.  # noqa: E501


        :return: The id of this PipelineBuild.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineBuild.


        :param id: The id of this PipelineBuild.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this PipelineBuild.  # noqa: E501


        :return: The metadata of this PipelineBuild.  # noqa: E501
        :rtype: PipelineMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PipelineBuild.


        :param metadata: The metadata of this PipelineBuild.  # noqa: E501
        :type: PipelineMetadata
        """

        self._metadata = metadata

    @property
    def secrets(self):
        """Gets the secrets of this PipelineBuild.  # noqa: E501


        :return: The secrets of this PipelineBuild.  # noqa: E501
        :rtype: SecretSlice
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this PipelineBuild.


        :param secrets: The secrets of this PipelineBuild.  # noqa: E501
        :type: SecretSlice
        """

        self._secrets = secrets

    @property
    def services(self):
        """Gets the services of this PipelineBuild.  # noqa: E501


        :return: The services of this PipelineBuild.  # noqa: E501
        :rtype: ContainerSlice
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this PipelineBuild.


        :param services: The services of this PipelineBuild.  # noqa: E501
        :type: ContainerSlice
        """

        self._services = services

    @property
    def stages(self):
        """Gets the stages of this PipelineBuild.  # noqa: E501


        :return: The stages of this PipelineBuild.  # noqa: E501
        :rtype: StageSlice
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this PipelineBuild.


        :param stages: The stages of this PipelineBuild.  # noqa: E501
        :type: StageSlice
        """

        self._stages = stages

    @property
    def steps(self):
        """Gets the steps of this PipelineBuild.  # noqa: E501


        :return: The steps of this PipelineBuild.  # noqa: E501
        :rtype: ContainerSlice
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PipelineBuild.


        :param steps: The steps of this PipelineBuild.  # noqa: E501
        :type: ContainerSlice
        """

        self._steps = steps

    @property
    def version(self):
        """Gets the version of this PipelineBuild.  # noqa: E501


        :return: The version of this PipelineBuild.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PipelineBuild.


        :param version: The version of this PipelineBuild.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def worker(self):
        """Gets the worker of this PipelineBuild.  # noqa: E501


        :return: The worker of this PipelineBuild.  # noqa: E501
        :rtype: PipelineWorker
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this PipelineBuild.


        :param worker: The worker of this PipelineBuild.  # noqa: E501
        :type: PipelineWorker
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineBuild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineBuild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
