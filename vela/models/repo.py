# coding: utf-8
#
# Copyright (c) 2020 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'allow_comment': 'bool',
        'allow_deploy': 'bool',
        'allow_pull': 'bool',
        'allow_push': 'bool',
        'allow_tag': 'bool',
        'branch': 'str',
        'clone': 'str',
        'full_name': 'str',
        'id': 'int',
        'link': 'str',
        'name': 'str',
        'org': 'str',
        'private': 'bool',
        'timeout': 'int',
        'trusted': 'bool',
        'user_id': 'int',
        'visibility': 'str'
    }

    attribute_map = {
        'active': 'active',
        'allow_comment': 'allow_comment',
        'allow_deploy': 'allow_deploy',
        'allow_pull': 'allow_pull',
        'allow_push': 'allow_push',
        'allow_tag': 'allow_tag',
        'branch': 'branch',
        'clone': 'clone',
        'full_name': 'full_name',
        'id': 'id',
        'link': 'link',
        'name': 'name',
        'org': 'org',
        'private': 'private',
        'timeout': 'timeout',
        'trusted': 'trusted',
        'user_id': 'user_id',
        'visibility': 'visibility'
    }

    def __init__(self, active=None, allow_comment=None, allow_deploy=None, allow_pull=None, allow_push=None, allow_tag=None, branch=None, clone=None, full_name=None, id=None, link=None, name=None, org=None, private=None, timeout=None, trusted=None, user_id=None, visibility=None):  # noqa: E501
        """Repo - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._allow_comment = None
        self._allow_deploy = None
        self._allow_pull = None
        self._allow_push = None
        self._allow_tag = None
        self._branch = None
        self._clone = None
        self._full_name = None
        self._id = None
        self._link = None
        self._name = None
        self._org = None
        self._private = None
        self._timeout = None
        self._trusted = None
        self._user_id = None
        self._visibility = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if allow_comment is not None:
            self.allow_comment = allow_comment
        if allow_deploy is not None:
            self.allow_deploy = allow_deploy
        if allow_pull is not None:
            self.allow_pull = allow_pull
        if allow_push is not None:
            self.allow_push = allow_push
        if allow_tag is not None:
            self.allow_tag = allow_tag
        if branch is not None:
            self.branch = branch
        if clone is not None:
            self.clone = clone
        if full_name is not None:
            self.full_name = full_name
        if id is not None:
            self.id = id
        if link is not None:
            self.link = link
        if name is not None:
            self.name = name
        if org is not None:
            self.org = org
        if private is not None:
            self.private = private
        if timeout is not None:
            self.timeout = timeout
        if trusted is not None:
            self.trusted = trusted
        if user_id is not None:
            self.user_id = user_id
        if visibility is not None:
            self.visibility = visibility

    @property
    def active(self):
        """Gets the active of this Repo.  # noqa: E501


        :return: The active of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Repo.


        :param active: The active of this Repo.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def allow_comment(self):
        """Gets the allow_comment of this Repo.  # noqa: E501


        :return: The allow_comment of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_comment

    @allow_comment.setter
    def allow_comment(self, allow_comment):
        """Sets the allow_comment of this Repo.


        :param allow_comment: The allow_comment of this Repo.  # noqa: E501
        :type: bool
        """

        self._allow_comment = allow_comment

    @property
    def allow_deploy(self):
        """Gets the allow_deploy of this Repo.  # noqa: E501


        :return: The allow_deploy of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_deploy

    @allow_deploy.setter
    def allow_deploy(self, allow_deploy):
        """Sets the allow_deploy of this Repo.


        :param allow_deploy: The allow_deploy of this Repo.  # noqa: E501
        :type: bool
        """

        self._allow_deploy = allow_deploy

    @property
    def allow_pull(self):
        """Gets the allow_pull of this Repo.  # noqa: E501


        :return: The allow_pull of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pull

    @allow_pull.setter
    def allow_pull(self, allow_pull):
        """Sets the allow_pull of this Repo.


        :param allow_pull: The allow_pull of this Repo.  # noqa: E501
        :type: bool
        """

        self._allow_pull = allow_pull

    @property
    def allow_push(self):
        """Gets the allow_push of this Repo.  # noqa: E501


        :return: The allow_push of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_push

    @allow_push.setter
    def allow_push(self, allow_push):
        """Sets the allow_push of this Repo.


        :param allow_push: The allow_push of this Repo.  # noqa: E501
        :type: bool
        """

        self._allow_push = allow_push

    @property
    def allow_tag(self):
        """Gets the allow_tag of this Repo.  # noqa: E501


        :return: The allow_tag of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_tag

    @allow_tag.setter
    def allow_tag(self, allow_tag):
        """Sets the allow_tag of this Repo.


        :param allow_tag: The allow_tag of this Repo.  # noqa: E501
        :type: bool
        """

        self._allow_tag = allow_tag

    @property
    def branch(self):
        """Gets the branch of this Repo.  # noqa: E501


        :return: The branch of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Repo.


        :param branch: The branch of this Repo.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def clone(self):
        """Gets the clone of this Repo.  # noqa: E501


        :return: The clone of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._clone

    @clone.setter
    def clone(self, clone):
        """Sets the clone of this Repo.


        :param clone: The clone of this Repo.  # noqa: E501
        :type: str
        """

        self._clone = clone

    @property
    def full_name(self):
        """Gets the full_name of this Repo.  # noqa: E501


        :return: The full_name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repo.


        :param full_name: The full_name of this Repo.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this Repo.  # noqa: E501


        :return: The id of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repo.


        :param id: The id of this Repo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this Repo.  # noqa: E501


        :return: The link of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Repo.


        :param link: The link of this Repo.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this Repo.  # noqa: E501


        :return: The name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repo.


        :param name: The name of this Repo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Repo.  # noqa: E501


        :return: The org of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Repo.


        :param org: The org of this Repo.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def private(self):
        """Gets the private of this Repo.  # noqa: E501


        :return: The private of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Repo.


        :param private: The private of this Repo.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def timeout(self):
        """Gets the timeout of this Repo.  # noqa: E501


        :return: The timeout of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Repo.


        :param timeout: The timeout of this Repo.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def trusted(self):
        """Gets the trusted of this Repo.  # noqa: E501


        :return: The trusted of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._trusted

    @trusted.setter
    def trusted(self, trusted):
        """Sets the trusted of this Repo.


        :param trusted: The trusted of this Repo.  # noqa: E501
        :type: bool
        """

        self._trusted = trusted

    @property
    def user_id(self):
        """Gets the user_id of this Repo.  # noqa: E501


        :return: The user_id of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Repo.


        :param user_id: The user_id of this Repo.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def visibility(self):
        """Gets the visibility of this Repo.  # noqa: E501


        :return: The visibility of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Repo.


        :param visibility: The visibility of this Repo.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
