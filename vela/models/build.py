# coding: utf-8
#
# Copyright (c) 2021 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Build(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
        'base_ref': 'str',
        'branch': 'str',
        'clone': 'str',
        'commit': 'str',
        'created': 'int',
        'deploy': 'str',
        'distribution': 'str',
        'email': 'str',
        'enqueued': 'int',
        'error': 'str',
        'event': 'str',
        'finished': 'int',
        'head_ref': 'str',
        'host': 'str',
        'id': 'int',
        'link': 'str',
        'message': 'str',
        'number': 'int',
        'parent': 'int',
        'ref': 'str',
        'repo_id': 'int',
        'runtime': 'str',
        'sender': 'str',
        'source': 'str',
        'started': 'int',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'author': 'author',
        'base_ref': 'base_ref',
        'branch': 'branch',
        'clone': 'clone',
        'commit': 'commit',
        'created': 'created',
        'deploy': 'deploy',
        'distribution': 'distribution',
        'email': 'email',
        'enqueued': 'enqueued',
        'error': 'error',
        'event': 'event',
        'finished': 'finished',
        'head_ref': 'head_ref',
        'host': 'host',
        'id': 'id',
        'link': 'link',
        'message': 'message',
        'number': 'number',
        'parent': 'parent',
        'ref': 'ref',
        'repo_id': 'repo_id',
        'runtime': 'runtime',
        'sender': 'sender',
        'source': 'source',
        'started': 'started',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, author=None, base_ref=None, branch=None, clone=None, commit=None, created=None, deploy=None, distribution=None, email=None, enqueued=None, error=None, event=None, finished=None, head_ref=None, host=None, id=None, link=None, message=None, number=None, parent=None, ref=None, repo_id=None, runtime=None, sender=None, source=None, started=None, status=None, title=None):  # noqa: E501
        """Build - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._base_ref = None
        self._branch = None
        self._clone = None
        self._commit = None
        self._created = None
        self._deploy = None
        self._distribution = None
        self._email = None
        self._enqueued = None
        self._error = None
        self._event = None
        self._finished = None
        self._head_ref = None
        self._host = None
        self._id = None
        self._link = None
        self._message = None
        self._number = None
        self._parent = None
        self._ref = None
        self._repo_id = None
        self._runtime = None
        self._sender = None
        self._source = None
        self._started = None
        self._status = None
        self._title = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if base_ref is not None:
            self.base_ref = base_ref
        if branch is not None:
            self.branch = branch
        if clone is not None:
            self.clone = clone
        if commit is not None:
            self.commit = commit
        if created is not None:
            self.created = created
        if deploy is not None:
            self.deploy = deploy
        if distribution is not None:
            self.distribution = distribution
        if email is not None:
            self.email = email
        if enqueued is not None:
            self.enqueued = enqueued
        if error is not None:
            self.error = error
        if event is not None:
            self.event = event
        if finished is not None:
            self.finished = finished
        if head_ref is not None:
            self.head_ref = head_ref
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if link is not None:
            self.link = link
        if message is not None:
            self.message = message
        if number is not None:
            self.number = number
        if parent is not None:
            self.parent = parent
        if ref is not None:
            self.ref = ref
        if repo_id is not None:
            self.repo_id = repo_id
        if runtime is not None:
            self.runtime = runtime
        if sender is not None:
            self.sender = sender
        if source is not None:
            self.source = source
        if started is not None:
            self.started = started
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title

    @property
    def author(self):
        """Gets the author of this Build.  # noqa: E501


        :return: The author of this Build.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Build.


        :param author: The author of this Build.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def base_ref(self):
        """Gets the base_ref of this Build.  # noqa: E501


        :return: The base_ref of this Build.  # noqa: E501
        :rtype: str
        """
        return self._base_ref

    @base_ref.setter
    def base_ref(self, base_ref):
        """Sets the base_ref of this Build.


        :param base_ref: The base_ref of this Build.  # noqa: E501
        :type: str
        """

        self._base_ref = base_ref

    @property
    def branch(self):
        """Gets the branch of this Build.  # noqa: E501


        :return: The branch of this Build.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Build.


        :param branch: The branch of this Build.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def clone(self):
        """Gets the clone of this Build.  # noqa: E501


        :return: The clone of this Build.  # noqa: E501
        :rtype: str
        """
        return self._clone

    @clone.setter
    def clone(self, clone):
        """Sets the clone of this Build.


        :param clone: The clone of this Build.  # noqa: E501
        :type: str
        """

        self._clone = clone

    @property
    def commit(self):
        """Gets the commit of this Build.  # noqa: E501


        :return: The commit of this Build.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Build.


        :param commit: The commit of this Build.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def created(self):
        """Gets the created of this Build.  # noqa: E501


        :return: The created of this Build.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Build.


        :param created: The created of this Build.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def deploy(self):
        """Gets the deploy of this Build.  # noqa: E501


        :return: The deploy of this Build.  # noqa: E501
        :rtype: str
        """
        return self._deploy

    @deploy.setter
    def deploy(self, deploy):
        """Sets the deploy of this Build.


        :param deploy: The deploy of this Build.  # noqa: E501
        :type: str
        """

        self._deploy = deploy

    @property
    def distribution(self):
        """Gets the distribution of this Build.  # noqa: E501


        :return: The distribution of this Build.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this Build.


        :param distribution: The distribution of this Build.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def email(self):
        """Gets the email of this Build.  # noqa: E501


        :return: The email of this Build.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Build.


        :param email: The email of this Build.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enqueued(self):
        """Gets the enqueued of this Build.  # noqa: E501


        :return: The enqueued of this Build.  # noqa: E501
        :rtype: int
        """
        return self._enqueued

    @enqueued.setter
    def enqueued(self, enqueued):
        """Sets the enqueued of this Build.


        :param enqueued: The enqueued of this Build.  # noqa: E501
        :type: int
        """

        self._enqueued = enqueued

    @property
    def error(self):
        """Gets the error of this Build.  # noqa: E501


        :return: The error of this Build.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Build.


        :param error: The error of this Build.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def event(self):
        """Gets the event of this Build.  # noqa: E501


        :return: The event of this Build.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Build.


        :param event: The event of this Build.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def finished(self):
        """Gets the finished of this Build.  # noqa: E501


        :return: The finished of this Build.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Build.


        :param finished: The finished of this Build.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def head_ref(self):
        """Gets the head_ref of this Build.  # noqa: E501


        :return: The head_ref of this Build.  # noqa: E501
        :rtype: str
        """
        return self._head_ref

    @head_ref.setter
    def head_ref(self, head_ref):
        """Sets the head_ref of this Build.


        :param head_ref: The head_ref of this Build.  # noqa: E501
        :type: str
        """

        self._head_ref = head_ref

    @property
    def host(self):
        """Gets the host of this Build.  # noqa: E501


        :return: The host of this Build.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Build.


        :param host: The host of this Build.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Build.  # noqa: E501


        :return: The id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this Build.  # noqa: E501


        :return: The link of this Build.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Build.


        :param link: The link of this Build.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def message(self):
        """Gets the message of this Build.  # noqa: E501


        :return: The message of this Build.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Build.


        :param message: The message of this Build.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def number(self):
        """Gets the number of this Build.  # noqa: E501


        :return: The number of this Build.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Build.


        :param number: The number of this Build.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def parent(self):
        """Gets the parent of this Build.  # noqa: E501


        :return: The parent of this Build.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Build.


        :param parent: The parent of this Build.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def ref(self):
        """Gets the ref of this Build.  # noqa: E501


        :return: The ref of this Build.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Build.


        :param ref: The ref of this Build.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def repo_id(self):
        """Gets the repo_id of this Build.  # noqa: E501


        :return: The repo_id of this Build.  # noqa: E501
        :rtype: int
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this Build.


        :param repo_id: The repo_id of this Build.  # noqa: E501
        :type: int
        """

        self._repo_id = repo_id

    @property
    def runtime(self):
        """Gets the runtime of this Build.  # noqa: E501


        :return: The runtime of this Build.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Build.


        :param runtime: The runtime of this Build.  # noqa: E501
        :type: str
        """

        self._runtime = runtime

    @property
    def sender(self):
        """Gets the sender of this Build.  # noqa: E501


        :return: The sender of this Build.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Build.


        :param sender: The sender of this Build.  # noqa: E501
        :type: str
        """

        self._sender = sender

    @property
    def source(self):
        """Gets the source of this Build.  # noqa: E501


        :return: The source of this Build.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Build.


        :param source: The source of this Build.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def started(self):
        """Gets the started of this Build.  # noqa: E501


        :return: The started of this Build.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Build.


        :param started: The started of this Build.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Build.  # noqa: E501


        :return: The status of this Build.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.


        :param status: The status of this Build.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Build.  # noqa: E501


        :return: The title of this Build.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Build.


        :param title: The title of this Build.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Build, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Build):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
