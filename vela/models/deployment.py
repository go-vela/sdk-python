# coding: utf-8
#
# Copyright (c) 2020 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit': 'str',
        'description': 'str',
        'id': 'int',
        'ref': 'str',
        'repo_id': 'int',
        'target': 'str',
        'task': 'str',
        'url': 'str',
        'user': 'str'
    }

    attribute_map = {
        'commit': 'commit',
        'description': 'description',
        'id': 'id',
        'ref': 'ref',
        'repo_id': 'repo_id',
        'target': 'target',
        'task': 'task',
        'url': 'url',
        'user': 'user'
    }

    def __init__(self, commit=None, description=None, id=None, ref=None, repo_id=None, target=None, task=None, url=None, user=None):  # noqa: E501
        """Deployment - a model defined in Swagger"""  # noqa: E501
        self._commit = None
        self._description = None
        self._id = None
        self._ref = None
        self._repo_id = None
        self._target = None
        self._task = None
        self._url = None
        self._user = None
        self.discriminator = None
        if commit is not None:
            self.commit = commit
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if ref is not None:
            self.ref = ref
        if repo_id is not None:
            self.repo_id = repo_id
        if target is not None:
            self.target = target
        if task is not None:
            self.task = task
        if url is not None:
            self.url = url
        if user is not None:
            self.user = user

    @property
    def commit(self):
        """Gets the commit of this Deployment.  # noqa: E501


        :return: The commit of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Deployment.


        :param commit: The commit of this Deployment.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def description(self):
        """Gets the description of this Deployment.  # noqa: E501


        :return: The description of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deployment.


        :param description: The description of this Deployment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Deployment.  # noqa: E501


        :return: The id of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.


        :param id: The id of this Deployment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ref(self):
        """Gets the ref of this Deployment.  # noqa: E501


        :return: The ref of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Deployment.


        :param ref: The ref of this Deployment.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def repo_id(self):
        """Gets the repo_id of this Deployment.  # noqa: E501


        :return: The repo_id of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this Deployment.


        :param repo_id: The repo_id of this Deployment.  # noqa: E501
        :type: int
        """

        self._repo_id = repo_id

    @property
    def target(self):
        """Gets the target of this Deployment.  # noqa: E501


        :return: The target of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Deployment.


        :param target: The target of this Deployment.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def task(self):
        """Gets the task of this Deployment.  # noqa: E501


        :return: The task of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Deployment.


        :param task: The task of this Deployment.  # noqa: E501
        :type: str
        """

        self._task = task

    @property
    def url(self):
        """Gets the url of this Deployment.  # noqa: E501


        :return: The url of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Deployment.


        :param url: The url of this Deployment.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this Deployment.  # noqa: E501


        :return: The user of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Deployment.


        :param user: The user of this Deployment.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
