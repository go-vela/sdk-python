# coding: utf-8
#
# Copyright (c) 2022 Target Brands, Inc. All rights reserved.

"""
    Vela server

    API for the Vela server  # noqa: E501

    OpenAPI spec version: 0.6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vela.api_client import ApiClient


class StepsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_step(self, body, org, repo, build, **kwargs):  # noqa: E501
        """create_step  # noqa: E501

        Create a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_step(body, org, repo, build, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Step body: Payload containing the step to create (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_step_with_http_info(body, org, repo, build, **kwargs)  # noqa: E501
        else:
            (data) = self.create_step_with_http_info(body, org, repo, build, **kwargs)  # noqa: E501
            return data

    def create_step_with_http_info(self, body, org, repo, build, **kwargs):  # noqa: E501
        """create_step  # noqa: E501

        Create a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_step_with_http_info(body, org, repo, build, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Step body: Payload containing the step to create (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org', 'repo', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_step`")  # noqa: E501
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `create_step`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `create_step`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `create_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_step_log(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """create_step_log  # noqa: E501

        Create the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_step_log(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Log body: Payload containing the log to create (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_step_log_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.create_step_log_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def create_step_log_with_http_info(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """create_step_log  # noqa: E501

        Create the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_step_log_with_http_info(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Log body: Payload containing the log to create (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_step_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_step_log`")  # noqa: E501
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `create_step_log`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `create_step_log`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `create_step_log`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `create_step_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Log',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_step(self, org, repo, build, step, **kwargs):  # noqa: E501
        """delete_step  # noqa: E501

        Delete a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_step(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_step_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_step_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def delete_step_with_http_info(self, org, repo, build, step, **kwargs):  # noqa: E501
        """delete_step  # noqa: E501

        Delete a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_step_with_http_info(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `delete_step`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `delete_step`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `delete_step`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `delete_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_step_log(self, org, repo, build, step, **kwargs):  # noqa: E501
        """delete_step_log  # noqa: E501

        Delete the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_step_log(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_step_log_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_step_log_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def delete_step_log_with_http_info(self, org, repo, build, step, **kwargs):  # noqa: E501
        """delete_step_log  # noqa: E501

        Delete the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_step_log_with_http_info(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_step_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `delete_step_log`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `delete_step_log`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `delete_step_log`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `delete_step_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step(self, org, repo, build, step, **kwargs):  # noqa: E501
        """get_step  # noqa: E501

        Retrieve a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_step_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.get_step_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def get_step_with_http_info(self, org, repo, build, step, **kwargs):  # noqa: E501
        """get_step  # noqa: E501

        Retrieve a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_with_http_info(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `get_step`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `get_step`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `get_step`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `get_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step_log(self, org, repo, build, step, **kwargs):  # noqa: E501
        """get_step_log  # noqa: E501

        Retrieve the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_log(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_step_log_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.get_step_log_with_http_info(org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def get_step_log_with_http_info(self, org, repo, build, step, **kwargs):  # noqa: E501
        """get_step_log  # noqa: E501

        Retrieve the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_log_with_http_info(org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `get_step_log`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `get_step_log`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `get_step_log`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `get_step_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Log',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_steps(self, org, repo, build, **kwargs):  # noqa: E501
        """get_steps  # noqa: E501

        Retrieve a list of steps for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_steps(org, repo, build, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :return: list[Step]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_steps_with_http_info(org, repo, build, **kwargs)  # noqa: E501
        else:
            (data) = self.get_steps_with_http_info(org, repo, build, **kwargs)  # noqa: E501
            return data

    def get_steps_with_http_info(self, org, repo, build, **kwargs):  # noqa: E501
        """get_steps  # noqa: E501

        Retrieve a list of steps for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_steps_with_http_info(org, repo, build, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :return: list[Step]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'repo', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `get_steps`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `get_steps`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `get_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Step]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_step(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """update_step  # noqa: E501

        Update a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Step body: Payload containing the step to update (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_step_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.update_step_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def update_step_with_http_info(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """update_step  # noqa: E501

        Update a step for a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step_with_http_info(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Step body: Payload containing the step to update (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Step
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_step`")  # noqa: E501
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `update_step`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `update_step`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `update_step`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `update_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Step',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_step_log(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """update_step_log  # noqa: E501

        Update the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step_log(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Log body: Payload containing the log to update (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_step_log_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
        else:
            (data) = self.update_step_log_with_http_info(body, org, repo, build, step, **kwargs)  # noqa: E501
            return data

    def update_step_log_with_http_info(self, body, org, repo, build, step, **kwargs):  # noqa: E501
        """update_step_log  # noqa: E501

        Update the logs for a step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_step_log_with_http_info(body, org, repo, build, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Log body: Payload containing the log to update (required)
        :param str org: Name of the org (required)
        :param str repo: Name of the repo (required)
        :param int build: Build number (required)
        :param str step: Build number (required)
        :return: Log
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org', 'repo', 'build', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_step_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_step_log`")  # noqa: E501
        # verify the required parameter 'org' is set
        if ('org' not in params or
                params['org'] is None):
            raise ValueError("Missing the required parameter `org` when calling `update_step_log`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `update_step_log`")  # noqa: E501
        # verify the required parameter 'build' is set
        if ('build' not in params or
                params['build'] is None):
            raise ValueError("Missing the required parameter `build` when calling `update_step_log`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `update_step_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'build' in params:
            path_params['build'] = params['build']  # noqa: E501
        if 'step' in params:
            path_params['step'] = params['step']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Log',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
